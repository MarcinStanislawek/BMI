{"version":3,"sources":["components/bmiCalculator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["bmiInformation","bmi","NaN","Infinity","Round","n","k","factor","Math","pow","round","BMICalculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOnChange","e","_e$target","target","name","value","_Object$assign","assign","state","defineProperty","weight","height","info","setState","_this$state","react_default","a","createElement","className","onChange","React","Component","App","components_bmiCalculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAeA,SAASA,EAAeC,GACpB,OAAY,IAARA,GAAqBC,MAARD,GAAeA,IAAQE,IAC7B,oBACDF,GAAK,GACJ,6BACAA,EAAI,KACJ,4BAEA,6BAIf,SAASG,EAAMC,EAAWC,GAEtB,IAAIC,EAASC,KAAKC,IAAI,GAAIH,GAC1B,OAAOE,KAAKE,MAAML,EAAEE,GAAQA,MAiDjBI,cA3CX,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASVQ,eAAiB,SAACC,GAAW,IAAAC,EACHD,EAAEE,OAAjBC,EADkBF,EAClBE,KAAMC,EADYH,EACZG,MADYC,EAEWZ,OAAOa,OAAO,GAAId,EAAKe,MAAvBd,OAAAe,EAAA,EAAAf,CAAA,GAAgCU,EAAOC,IAApEK,EAFkBJ,EAElBI,OAAQC,EAFUL,EAEVK,OAAQ9B,EAFEyB,EAEFzB,IAEnB2B,GAJqBF,EAEGM,KAEhBnB,EAAKe,OACL,WAATJ,GAA8B,WAATA,IACpBI,EAAQ,CACJE,SACAC,SACA9B,IAAKG,EAAM0B,EAAOtB,KAAKC,IAAIsB,EAAO,IAAK,GAAI,GAC3CC,KAAMhC,EAAeC,KAG7BY,EAAKoB,SAASL,IApBdf,EAAKe,MAAQ,CACTE,OAAQ,EACRC,OAAQ,EACR9B,IAAK,EACL+B,KAAM,qBAPYnB,wEAyBjB,IAAAqB,EAC0BlB,KAAKY,MAA7BE,EADFI,EACEJ,OAAQC,EADVG,EACUH,OAAQ9B,EADlBiC,EACkBjC,IAEvB,OAAOkC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAClBH,EAAAC,EAAAC,cAAA,+BACKF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAjB,2BACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QAAQd,KAAK,SAASC,MAAOK,EAAQS,SAAUvB,KAAKI,iBACrEe,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAjB,wBACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QAAQd,KAAK,SAASC,MAAOM,EAAQQ,SAAUvB,KAAKI,iBACrEe,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAjB,qBACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QAAQd,KAAK,MAAMC,MAAOxB,EAAKsC,SAAUvB,KAAKI,iBAC/De,EAAAC,EAAAC,cAAA,SAAOC,UAAU,OAAOd,KAAK,OAAOC,MAAOzB,EAAeC,GAAMsC,SAAUvB,KAAKI,yBAvCnEoB,IAAMC,WClBpBC,EAVO,WAEpB,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,mBACEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAaH,EAAAC,EAAAC,cAACM,EAAD,SCEhBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7322d6b7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bmiCalculator.css';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface State {\r\n    weight: number;\r\n    height: number;\r\n    bmi: number;\r\n    info: string;\r\n\r\n}\r\n\r\nfunction bmiInformation(bmi: number) {\r\n    if (bmi === 0 || bmi === NaN || bmi === Infinity) {\r\n        return \"Twoje BMI jest...\"\r\n    } else if(bmi>=25) {\r\n        return \"Twoje BMI jest za wysokie!\"\r\n    } else if (bmi<18.5) {\r\n        return \"Twoje BMI jest za niskie!\"\r\n    } else {\r\n        return \"Twoje BMI jest w normie :)\"\r\n    }\r\n}\r\n\r\nfunction Round(n: number, k: number)\r\n{\r\n    var factor = Math.pow(10, k);\r\n    return Math.round(n*factor)/factor;\r\n}\r\n\r\n class BMICalculator extends React.Component<Props, State> {\r\n\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            weight: 0,\r\n            height: 0,\r\n            bmi: 0,\r\n            info: \"Twoje BMI jest...\",\r\n        }\r\n    }\r\n    handleOnChange = (e: any) => {\r\n        const {name, value} = e.target\r\n        const {weight, height, bmi, info} = Object.assign({}, this.state, {[name]: value})\r\n    \r\n        let state = this.state\r\n        if(name === 'weight' || name === 'height') {\r\n            state = {\r\n                weight,\r\n                height,\r\n                bmi: Round(weight/Math.pow(height/100, 2), 2),\r\n                info: bmiInformation(bmi),\r\n                }\r\n        } \r\n        this.setState(state)\r\n    }\r\n    render() {\r\n        const {weight, height, bmi } = this.state\r\n\r\n        return <div className=\"CalculatorContainer\">\r\n            <h1>Policz swoje BMI:</h1>\r\n                 <label className=\"block\">Wpisz wagÄ™ (w kg):</label>\r\n                 <input className=\"block\" name=\"weight\" value={weight} onChange={this.handleOnChange} /> \r\n                 <label className=\"block\">Wpisz wzrost (w cm):</label>\r\n                 <input className=\"block\" name=\"height\" value={height} onChange={this.handleOnChange} /> \r\n                 <label className=\"block\">Twoje BMI wynosi:</label>\r\n                 <input className=\"block\" name=\"bmi\" value={bmi} onChange={this.handleOnChange} />\r\n                 <input className=\"info\" name=\"info\" value={bmiInformation(bmi)} onChange={this.handleOnChange} />\r\n\r\n        </div>\r\n\r\n    }\r\n}\r\n\r\nexport default BMICalculator","import React from 'react';\nimport './App.css';\nimport BMICalculator from './components/bmiCalculator';\n\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"container\">\n      <div className=\"logo\">BMI Kalkulator!</div>\n        <div className=\"calculator\"><BMICalculator /></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}